package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

@TeleOp

public class TeleOpMark extends LinearOpMode {
       private DcMotor LFMotor;
       private DcMotor RFMotor;
       private DcMotor LBMotor;
       private DcMotor RBMotor;
       private DcMotor LSlide;
       private DcMotor RSlide;
       private Servo LArm;
       private Servo RArm;
       private Servo Wrist;
       private Servo Claw;
       
       boolean wristDown;
       boolean clawOpen;
       
public void runOpMode(){
        LFMotor = hardwareMap.get(DcMotor.class, "LFMotor");
        RFMotor = hardwareMap.get(DcMotor.class, "RFMotor");
        LBMotor = hardwareMap.get(DcMotor.class, "LBMotor");
        RBMotor = hardwareMap.get(DcMotor.class, "RBMotor");
        LSlide = hardwareMap.get(DcMotor.class, "LSlide");
        RSlide = hardwareMap.get(DcMotor.class, "RSlide");
        
        LArm = hardwareMap.get(Servo.class, "LArm");
        RArm = hardwareMap.get(Servo.class, "RArm");
        Wrist = hardwareMap.get(Servo.class, "Wrist");
        Claw = hardwareMap.get(Servo.class, "Claw");
    
        Wrist.setDirection(Servo.Direction.REVERSE);
    
        
        LBMotor.setDirection(DcMotor.Direction.REVERSE);
        LFMotor.setDirection(DcMotor.Direction.REVERSE);
        
        
        wristDown = true;
        clawOpen  = false;
        
        telemetry.addData("Status", "Running");
        telemetry.update();
        
        waitForStart();
    while(opModeIsActive()) {
     double RFtgtPower = 0;
     double LFtgtPower = 0;
     double RBtgtPower = 0;
     double LBtgtPower = 0;
     double py = -gamepad1.left_stick_y;
     double px = gamepad1.left_stick_x;
     double pa = gamepad1.right_stick_x;
     
    LFMotor.setPower((py-px+pa) / 1.5);
    RFMotor.setPower((py-px-pa) / 1.5);
    LBMotor.setPower((py+px+pa) / 1.5);
    RBMotor.setPower((py+px-pa) / 1.5);
    
    
    if (gamepad1.y){
        Wrist.setPosition(0.5);
        wristDown = false;
        telemetry.addData("Status", "Y_Pressed");
        telemetry.update();
}
    if ((gamepad1.y) && (wristDown == false)){
        Wrist.setPosition(0.1);
        wristDown = true;
}

        if (gamepad1.x){
            LArm.setPosition(-0.5);
            RArm.setPosition(0.5);
        telemetry.addData("Status", "X_Pressed");
        telemetry.update();
        } 
}
}
}
